This document provides a number of examples for the use of gpkit.  We begin with simple contrived examples and then work our way up to more complex examples including aircraft design problems.  We assume that the reader has no experience with gpkit, but a basic understanding of optimization and Python.  

Example 1: 
------------------------------------------------------------
For the following GP in standard form:

minimize:	A
    with:	1 >= 1/A

Written in gpkit, this simple optimization problem becomes:

from gpkit import Variable, VectorVariable, GP
A = Variable("A", "-", "My First Variable")
gp_object = GP(A, [1 >= 1/A])
sol = gp_object.solve(printing=False)
print sol(A)

Let us examine this code in more detail.

import gpkit as gpkit

This line simply imports the gpkit library, a process which should be familliar to a reader with knowledge of Python.   

A = gpkit.Variable("A", "-", "My First Variable")

We then declare the variable 'A' using the 'Variable' call in gpkit.  Variables are the basic building blocks of gpkit's user interface, and are used in constraints and objective functions.  Within the 'Variable' call, we have three fields. The first field is the name of the variable.  This will serve as a pointer when accessing information from the output of the solved GP and also is used for LaTeX printing in an iPython Notebook.  The second field is the units of the variable.  Here, since we are assigning an arbitrary constant, we have no units, and so a '-' here indicates this fact.  The final field is the variable description, and while optional, is good practice to include.

gp_object = gpkit.GP(A, [1 >= 1/A])

Here we generate the gp object that will be passed to the solver.  The first input to 'GP' is the objective function that we want to minimize.  Note however that we could just have easily maximized A by setting the objective function to be 1/A.  In the second field, we specifiy the constraints.  gpkit uses operator overloading to provide a very natural declaration of constraints, and many more examples of constraints will be presented in the following examples.  We must also use square brackets, as it is expected that this input will be a list.  Note that there is also a third input to GP that will be seen later.

sol = gp_object.solve(printing=False)

At this point, we pass the gp object to the solver.  The object 'sol' stores the results of the optimization, while the flag 'printing=False' tells the mosek solver not to print out any intermediate information for us to review.

print sol(A)

Finally, we have our answer and print it to the terminal for review.  As expected, we ran hard against the constraint, and A=1.


Example 2: 
------------------------------------------------------------
Say for example we wish to build a rectangular tank which will 100 kg of water, while minimizing the material necessary to build the tank, modeled to first order as surface area.  We can write the following GP:

minimize:	A
    with:	A >= 2(lw + lh + wh) 
    		V == lwh
    		M == V*rho
    		rho == 1000
    		M == 100


Now, writing in gpkit, we obtain:

from gpkit import Variable, VectorVariable, GP
M   = Variable("M", 100, "kg", "Mass of Water in the Tank")
rho = Variable("\\rho", 1000, "kg/m^3", "Density of Water in the Tank")
A   = Variable("A", "m^2", "Surface Area of the Tank")
V   = Variable("V", "m^3", "Volume of the Tank")
d   = VectorVariable(3, "d", "m", "Dimension Vector")

constraints = (A >= 2*(d[0]*d[1] + d[0]*d[2] + d[1]*d[2]),
			   V == d[0]*d[1]*d[2],
			   M == V*rho
			  )

gp = GP(A, constraints)
sol = gp.solve(printing=False)
print sol(A)
print sol(V)
print sol(d)


Example 3: 
------------------------------------------------------------
Imagine we now want to create a 5 meter long beam with a square tapering cross section to carry a 100 kN ideal tip load.  How much can we minimize the weight of the beam before it yields?  Assume density of steel is 7750 kg/m^3, max tensile yield stress is 250 MPa, yield in shear is half this value, and use a saftey factor of 1.0 for this contrived example.

minimize:	Mass
    with:	V == -100000
    		M == integral(V,0,L,dx)+M_root
    		L == 5
    		Sigma_max == Md/2I
    		Tau_max == VQ/Id
    		I == 1/12*d^4
    		Q == 1/8*d^3
    		Volume == 1/2*(d_root^2 + d_tip^2)*L
    		Mass == rho*Volume
    		rho == 7750
    		Sigma_max_steel == 250000000

from gpkit import Variable, VectorVariable, GP
import numpy as np

N = 30
length = 5
x_arr = np.arange(0, length, length/float(N))+1e-6

rho   = Variable("\\rho", 7750, "kg/m^3", "Density of Air")
Load  = Variable("Load", 100000, "N", "Tip Load")
L     = Variable("L", length, "m", "Beam Length")
x 	  = VectorVariable(N, "x", x_arr, "m", "Beam Location")
s_yld = Variable("s_yld", 250000000, "N/m^2", "Max Yield for Steel")

Volume 		= Variable("Volume", "m^3", "Beam Volume")
Mass 		= Variable("Mass", "kg", "Beam Mass")
RBM 		= VectorVariable("RBM", "N*m", "Root Bending Moment")
TBM 		= VectorVariable("TBM", "N*m", "Tip Bending Moment")

V 			= VectorVariable(N, "V", "N", "Shear")
M 			= VectorVariable(N, "M", "N*m", "Moment")
Sigma_max	= VectorVariable(N, "Sigma_max", "N/m^2", "Max Normal Stress")
Tau_max		= VectorVariable(N, "Tau_max", "N/m^2", "Max Shear Stress")
I 			= VectorVariable(N, "I", "m^4", "Moment of Inertia")
Q 			= VectorVariable(N, "Q", "m^3", "First Area Inertia")
d 			= VectorVariable(N, "d", "m", "Length of side of square cross section")

constraints = (V == Load,
			   [M[j-1] >= M[j] + V[j-1]*x[j-1] for j in range(1, N)],
			   M[N-1] == L/N*Load,
			   I == 1/12*d^4,
			   s_yld >= M*d/(2*I),
			   Q == 1/8*d^3,
			   s_yld/2 >= V*Q/(I*d),
			   Volume >= 1/2*d[0]^2*L + 1/2*d[N-1]^2*L,
			   Mass == rho*Volume
			  )

gp = GP(Mass, constraints)
sol = gp.solve(printing=False)
print sol(Mass)
print sol(d)


